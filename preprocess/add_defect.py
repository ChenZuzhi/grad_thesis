import numpy as npimport cv2 as cvclass AddDefect(object):	def __init__(self, m, n):		self.m = m # ordinal of background picture		self.n = n # ordinal of defect picture		self.img = cv.imread('./origin_images/'+str(self.m)+'.png')		self.draw = self.img		self.row, self.col, chl = self.img.shape			def get_point(self):		x = int(np.random.uniform(1, self.row-1))		y = int(np.random.uniform(1, self.col-1))		print('x:', x, 'y:', y)		return x,y		def get_channel(self,x,y):		return self.img[x,y]	def light_dark(channel):		# light 1		# dark 0		a = np.asscalar(channel[0])		b = np.asscalar(channel[1])		c = np.asscalar(channel[2])				if sum([a,b,c])>256*3/2:			return 1		else:			return 0			def light_color(self):		a = np.random.uniform(1,256/3)		b = np.random.uniform(1,256/3)		c = np.random.uniform(1,256/3)		return int(a),int(b),int(c)			def dark_color(self):		a = np.random.uniform(256*2/3,255)		b = np.random.uniform(256*2/3,255)		c = np.random.uniform(256*2/3,255)		return int(a),int(b),int(c)			def random_color(self):		a = np.random.uniform(1,255)		b = np.random.uniform(1,255)		c = np.random.uniform(1,255)		return int(a),int(b),int(c)		def add_dot(self):		x,y = self.get_point()		r = int(np.random.uniform(4, 10))				rd = np.random.uniform(0,1)		if rd<0.4:			a,b,c = self.light_color()		elif rd>0.6:			a,b,c = self.dark_color()		else:			a,b,c = self.random_color()				cv.circle(self.draw, (x, y), r, (a,b,c), -1)		self.name = "./generated_images/dot/dot_"+str(self.n)+".png"		cv.imwrite(self.name, self.draw)		cv.destroyAllWindows()				"""	#img = cv.imread('./origin_images/'+str(m)+'.png')#cv.imshow('origin', img)# get the cols and rows of image#ows, cols, chs = img.shape#print('rows:', rows, 'cols:', cols)# ----------------------------add defects-----------------------------------# generate the defect center and range randomlycenter_x = int(np.random.uniform(1, rows-1))center_y = int(np.random.uniform(1, cols-1))r = int(np.random.uniform(4, 10))print('x:', center_x, 'y:', center_y, 'r:', r)# read the original color around  defect siteoriginal_color = img[center_x,center_y,:]print(original_color)a = np.asscalar(original_color[0])b = np.asscalar(original_color[1])c = np.asscalar(original_color[2])original_channel = np.array([a,b,c])# randomly choose different defect colorif sum(original_channel)*np.random.normal(0.4,1)>=256*2:	# light original colore	defect_color = original_color/2elif sum(original_channel)/np.random.normal(0.4,1)<=256:	# dark original color	defect_color = original_color*2else:	 # a totally different color from the original	 defect_color = original_color*int(np.random.normal(50,10))	print(defect_color)a = np.asscalar(defect_color[0])b = np.asscalar(defect_color[1])c = np.asscalar(defect_color[2])defect_channel = np.array([a,b,c])# add circlecv.circle(draw, (center_x, center_y), abs(r), (a,b,c), -1)# -----------------------------save defect image and set labels--------------------------name = "./generated_images/dot/dot_"+str(n)+".png"cv.imwrite(name, draw)cv.destroyAllWindows()"""